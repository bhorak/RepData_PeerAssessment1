require(quantmod)
getSymbols("YHOO",src="google")
getSymbols("YHOO",src="google") # from google finance
getSymbols("GOOG",src="yahoo") # from yahoo finance
getSymbols("DEXUSJP",src="FRED") # FX rates from FRED
getSymbols("XPT/USD",src="Oanda") # Platinum from Oanda Sort of handy, but it gets better... > #
#Specify lookup parameters, and save for future sessions.
setSymbolLookup(YHOO='google',GOOG='yahoo')
setSymbolLookup(DEXUSJP='FRED')
setSymbolLookup(XPTUSD=list(name="XPT/USD",src="oanda")
saveSymbolLookup(file="mysymbols.rda")
# new sessions call loadSymbolLookup(file="mysymbols.rda")
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
View(GOOG)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
x<-amzn['2008']
View(x)
getSymbols("SBUX")
daily_returns<-dailyReturn(SBUX)
View(daily_returns)
weekly_returns<-weeklyReturn(SBUX)
View(weekly_returns)
getSymbols("AAPL",src="google")
View(AAPL)
daily_aapl<-dailyReturn(AAPL)
View(daily_aapl)
getDividends(AAPL)
getDividends(AAPL)
getSymbols("AAPL")
getDividends("AAPL")
aapl_div<-getDividends("AAPL")
View(aapl_div)
getFinancials("AAPL")
viewFinancials("AAPL")
viewFinancials("AAPL.f")
viewFinancials(AAPL.f)
getQoute("AAPL")
getQuote("AAPL")
swirl()
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jiter(child,4)~parent,galton)
plot(jitter(child,4)~parent,galton)
regline<-lm(child~parent, galton)
regrline<-lm(child~parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean_x<-mean(x)
sd_x<-sd(x)
norm_x<-(x-mean_x)/sd_x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
reg<-lm(x~y)
summary(reg)
reg<-lm(x~y-1)
summary(reg)
reg<-lm(y~x-1)
summary(reg)
reg<-lm(y~x)
summary(reg)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
reg_1<-lm(y~x)
reg_2<-lm(x~y)
summary(reg_1)
summary(reg_2)
source('~/.active-rstudio-document')
optim(0,sum_sq)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean_x<-mean(x)
sd_x<-sd(x)
norm<-x-mean(x)
norm<-norm/sd_x
mean(norm)
sd(norm)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xw<-x*w
mean(x*w)
wx<-x*w^2
mean(wx)
w_2<-w/7
wx<-x*w_2
mean(wx)
sum(w)
sum(w_2)
wx_3<-w*x
summy<-sum(wx_3)
summy/7
w_3<-w/7
sum(w_3*x)
setwd("~/GitHub/PeerAssesments")
?unzip
unzip("repdata-data-activity.zip")
data<-read("activity.csv")
data<-read.csv("activity.csv")
View(data)
setwd("~/GitHub/RepData_PeerAssessment1")
unzip("activity.zip")
data<-read.csv(a)
data<-read.csv("activity.csv")
unzip("activity.zip")
data<-read.csv("activity.csv")
View(data)
hist(data$steps)
hist(data$steps,na.rm=T)
?hist
unzip("activity.zip")
data<-read.csv("activity.csv")
## Rid the data of 'NA's'
na_vector<-is.na(data$steps)
data_clean<-data[clean,]
unzip("activity.zip")
data<-read.csv("activity.csv")
## Rid the data of 'NA's'
na_vector<-is.na(data$steps)
data_clean<-data[na_vector,]
hist(data_clean$steps)
hist(data_clean$steps)
View(data_clean)
unzip("activity.zip")
data<-read.csv("activity.csv")
## Rid the data of 'NA's'
na_vector<-is.na(data$steps)
data_clean<-data[!na_vector,]
View(data_clean)
?tapply
factors(data_clean$date)
factor(data_clean$date)
?factors
?factore
?factor
?tapply
x<-tapply(data_clean$steps,data,sum)
x<-tapply(data_clean$steps,data_clean$date,sum)
summray(x)
summary(x)
x
x_2<-x[2:29]
x_2
hist(x_2)
?hist
hist(x_2,breaks=10)
hist(x_2,breaks=8)
hist(x_2,breaks=100)
hist(x_2,breaks=12)
tapply(data$steps,data$date,sum)
hist(tapply$steps,data$date,sum)
x_3<-tapply(data$steps,data$date,sum)
hist(x_3)
hist(x_3,breaks=10)
##sum the number of steps per day
steps<-tapply(data$steps,data$date,sum)
##output histograms
hist(steps)
##add titles and labels
title(main="Numer of Steps Per Taken Day",sub="",xlab="Steps")
?hitst
?hist
hist(steps,main="Histogram of Number of Steps Taken Each Day")
hist(steps,main="Histogram of Number of Steps Taken Each Day",xlab="Steps")
nna<-is.na(steps)
steps_2<-steps[!nna]
hist(steps_2)
hist(steps)
hist(steps_2)
mean_steps<-mean(steps,na.rm=T)
median_staps<-median(steps,na.rm=T)
The mean number of steps is `r mean_steps` and the median is `r median_steps`.
source('~/.active-rstudio-document', echo=TRUE)
interval_steps<-tapply(data$steps,data$interval,mean)
interval_steps
interval_steps<-tapply(data$steps,data$interval,mean,na.rm=T)
inerval_steps
interval_steps
?plot
plot(interval_steps,type=1)
plot.xy(interval_steps,type=1)
levels(interval_steps)
str(interval_steps)
data.frame(interval_steps)
data_2<-data.frame(interval_steps)
View(data_2)
?colname
?col.name
colnames(data_2)
type(interval_steps)
class(interval_steps)
data_2$intervals<-rownames(data_2)
View(data_2)
row.names(data_2)=NULL
View(data_2)
plot(data_2$intervals,data_2$interval_steps,type=1)
?plot
class(date_2)
class(data_2)
str(data_2)
plot(data_2$intervals,data_2$interval_steps,type="l")
plot(data_2$intervals,data_2$interval_steps,type="l",main="Daily Step Average vs. Intervals",xlab="Interval Identifier",ylab="Average Daily Steps")
?title
maximum(data_2$interval_steps)
max(data_2$interval_steps)
?max
max_steps<-max(data_2)
max_steps<-max(data_2$interval_steps)
max_interval<-data_2$interval[data_2$steps==max_staps]
max_interval<-data_2$interval[data_2$steps==max_steps]
max_interval<-data_2$interval[data_2$interval_steps==max_steps]
max_interval<-data_2[data_2$interval_steps==max_steps]
max_interval<-data_2[data_2$interval_steps==max_steps,]
View(max_interval)
max_interval<-data_2[data_2$interval_steps==max_steps,data_2$interval]
View(max_interval)
max_interval<-as.numeric(data_2[data_2$interval_steps==max_steps,data_2$interval])
str(data_2)
max_interval<-data_2[data_2$interval_steps==max_steps,data_2$interval]
max_interval
max_interval<-max_interval[1,1]
max_interval
max_interval<-data_2[data_2$interval_steps==max_steps,]
View(max_interval)
max_interval<-data_2[data_2$interval_steps==max_steps,data_2$intervals]
max_interval<-data_2[data_2$interval_steps==max_steps,data_2$intervals]
max_interval<-data_2[data_2$interval_steps==max_steps,2]
View(data)
na_vector<-is.na(data$steps)
table(na_vector)
na_vector<-is.na(data$steps)
number_na<-sum(na_vector)
str(number_na)
View(data_2)
View(data)
?apply
data_3<-data
for i in 1:length(na_vector) {
if (is.na(data$steps[i])) {
data_3<-data_2[data$intervals[i]]
}
}
data_3<-data
for (i in 1:length(na_vector)) {
if (is.na(data$steps[i])) {
data_3<-data_2[data$intervals[i]]
}
}
View(data_3)
data_3<-data
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3<-data_2[data$intervals[i]]
}
}
View(data_2)
interval_steps<-tapply(data$steps,data$interval,mean,na.rm=T)
##modify the variable to make is suitable for plotting
data_2<-data.frame(interval_steps)
data_2$intervals<-rownames(data_2)
plot(data_2$intervals,data_2$interval_steps,type="l",
main="Average Steps vs. Interval",
xlab="Interval Identifier",
ylab="Average Steps")
View(data_2)
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3<-data_2[data$intervals[i]]
}
}
blah<-data_2[data$intervals[2]]
View(data_2)
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-data_2[data$intervals[i],interval_steps]
}
}
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-data_2[data$intervals[i],2]
}
}
View(data_3)
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-data_2[as.character(data$intervals[i]),2]
}
}
data_2[5,2]
View(data_2)
data_2[row.name="5",2]
data_2[rowname="5"]
names(data_2)
rownames(data_2)
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-interval_step[as.character(data$intervals[i])]
}
}
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-interval_steps[as.character(data$intervals[i])]
}
}
interval_steps[data$intervals[i]]
interval_steps[as.character(data$intervals[i])]
interval_steps[5]
interval_steps[[data$intervals[i]]]
interval_steps[[ascharacter(data$intervals[i])]]
interval_steps[[as.character(data$intervals[i])]]
str(interval_steps)
interval_steps[[as.character(data$intervals[1])]]
interval_steps[as.character(data$intervals[1])]
interval_steps[as.character(data$intervals[3])]
data$intervals[3]
View(data)
data$interval[3]
interval_steps[as.character(data$interval[3])]
interval_steps[[as.character(data$interval[3])]]
interval_steps[[data$interval[3]]]
interval_steps
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-interval_steps[[as.character(data$interval[i])]]
}
}
View(data_3)
##sum the number of steps per day
steps<-tapply(data$steps,data$date,sum)
##output histograms
hist(steps,main="Histogram of Number of Steps Taken Each Day",xlab="Steps")
##add titles and labels
mean_steps<-mean(steps,na.rm=T)
median_steps<-median(steps,na.rm=T)
mean_steps
median_steps
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==TRUE) {
data_3$steps[i]<-interval_steps[[as.character(data$interval[i])]]
}
}
data_3[1:10,]
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==True) {
data_3$steps[i]<-interval_steps[[as.character(data_3$interval[i])]]
}
}
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==T) {
data_3$steps[i]<-interval_steps[[as.character(data_3$interval[i])]]
}
}
View(data_3)
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==T) {
data_3$steps[i]<-interval_steps[[as.character(data_3$interval[i])]]
}
}
data[1:10,]
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==T) {
data_3$steps[i]<-interval_steps[[as.character(data_3$interval[i])]]
}
}
data_3[1:10,]
##sum the number of steps per day
steps<-tapply(data_3$steps,data_3$date,sum)
##output histograms
hist(steps,main="Histogram of Number of Steps Taken Each Day",xlab="Steps")
mean_steps_2<-mean(steps,na.rm=T)
median_steps_2<-median(steps,na.rm=T)
mean_steps_2
median_steps_2
mean_steps_2<-mean(steps)
median_steps_2<-median(steps)
mean_steps_2
median_steps_2
round(median_steps_2,0)
data_3<-data
for (i in 1:length(na_vector)) {
if (na_vector[i]==T) {
data_3$steps[i]<-interval_steps[[as.character(data_3$interval[i])]]
data_3$steps[i]<-round(data_3$steps[i],0)
}
}
data_3[1:10,]
##sum the number of steps per day
steps<-tapply(data_3$steps,data_3$date,sum)
##output histograms
hist(steps,main="Histogram of Number of Steps Taken Each Day",xlab="Steps")
mean_steps_2<-mean(steps)
median_steps_2<-median(steps)
mean_steps_2
median_steps_2
comp_table<-data.frame(c(mean_steps,median_steps),c(mean_steps_2,median_steps_2))
View(comp_table)
comp_table<-data.frame(c(mean_steps,median_steps),c(mean_steps_2,median_steps_2))
rownames(comp_table)<-c("mean","median")
colnames(comp_table)<-c("old","new")
View(comp_table)
comp_table<-data.frame(c(mean_steps,median_steps),c(mean_steps_2,median_steps_2))
rownames(comp_table)<-c("mean","median")
colnames(comp_table)<-c("old","new")
comp_table
?weekday
?weekdays
?is.weekday
data_3$date<-weeekdays(data_3$date)
data_3$date<-weekdays(data_3$date)
weekdays(data_3$date[2])
class(date_3$date[2])
class(data_3$date[2])
as.character(data_3$date[2])
weekdays(as.character(data_3$date[2]))
weekdays(as.date(data_3$date[2]))
weekdays(as.Date(data_3$date[2]))
data_3$date<-as.Date(data_3date)
data_3$date<-as.Date(data_3$date)
data_3$date<-weekdays(data_3$date)
View(data_3)
data_3$date<-weekdays(as.Date(data_3$date))
day_factor<-date_3$date==("Suturday","Sunday")
day_factor<-date_3$date==("Suturday"|Sunday")
day_factor<-(date_3$date=="Saturday")|(date_3$date=="Sunday")
day_factor<-(date_3$date=="Saturday")|(data_3$date=="Sunday")
day_factor<-(data_3$date=="Saturday")|(data_3$date=="Sunday")
class(day_factor)
day_factor_2<-as.numeric(day_factor)
day_factor<-as.numeric((data_3$date=="Saturday")|(data_3$date=="Sunday"))
day_factor<-factor(day_factor,labels=c("Weekday","Weekend"))
day_factor
table(day_factor)
?plot
?split
split(data_3,day_factor)
View(data_3)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
install.packages("ggplot2")
qplot(day_factor,interval_steps)
gplot(day_factor,interval_steps)
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(day_factor,interval_steps)
data_3$date<-day_factor
View(data_3)
View(data_3)
View(data_2)
View(data_3)
data_3[1:10,]
install.packages("plyr")
library(plyr)
setwd("~/GitHub/RepData_PeerAssessment1")
?dapply
?daply
data_array<-dapply(data_3,day_factor)
data_array<-daply(data_3,day_factor)
data_array<-daply(data_3,data_3$date)
View(data_3)
data_array<-daply(data_3,.data_3$date)
data_array<-daply(data_3,.(data_3$date))
data_array<-daply(data_3,.(data_3$date),.fun=NULL)
data_array<-split(data_3,data$date)
data_array<-daply(data_3,day_factor,.fun=NULL)
split(data_3,day_factor)
data_array<-split(data_3,day_factor)
weekend<-data_array["weekend"]
weekend<-data_array[1]
weekday<-data_array[1]
?ldaply
?ldply
plot(data_3$steps,data$intervals,type="l")
?plot
interval_steps<-tapply(data_3$steps,data_3$interval,mean,na.rm=T)
interval_steps
?tapply
View(data_3)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
View(data_3)
View(data_3)
data<-split(data_3,data_3$date)
data_3$date<-weekdays(as.Date(data_3$date))
day_factor<-as.numeric((data_3$date=="Saturday")|(data_3$date=="Sunday"))
day_factor<-factor(day_factor,labels=c("Weekday","Weekend"))
data_3$date<-day_factor
data_split<-split(data_3,data_3$date)
data_weekday<-data_split[1]
data_weekend<-data_split[2]
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
View(data_weekend)
